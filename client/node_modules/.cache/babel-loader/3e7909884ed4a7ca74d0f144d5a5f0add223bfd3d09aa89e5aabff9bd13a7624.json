{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Food Delivery project\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n// Create a baseURL that can be easily changed for different environments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Google OAuth Configuration - would typically come from environment variables\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '486416947192-v72oq2gu28e25oqfg5rhnfgfnj85nmlg.apps.googleusercontent.com';\nconst GOOGLE_REDIRECT_URI = process.env.REACT_APP_GOOGLE_REDIRECT_URI || 'http://localhost:3000/auth/google/callback';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 8000,\n  // Reduced timeout for faster error response\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  // Handle network errors (server not running)\n  if (error.code === 'ERR_NETWORK' || !error.response) {\n    console.warn('Network error detected, server might be down');\n    error.isNetworkError = true;\n  }\n  return Promise.reject(error);\n});\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Mock users database for development\nconst MOCK_USERS = [{\n  id: '1',\n  name: 'Aarchi Patel',\n  email: 'patel.aarchi.sanjay@gmail.com',\n  password: 'password',\n  role: 'user'\n}, {\n  id: '2',\n  name: 'Test User',\n  email: 'user@example.com',\n  password: 'password',\n  role: 'user'\n}, {\n  id: '3',\n  name: 'Raksha',\n  email: 'raksha123@gmail.com',\n  password: 'password123',\n  role: 'user'\n}];\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await api.get('/auth/me');\n          setUser(response.data);\n        } catch (err) {\n          var _err$response;\n          // If network error or API not available, try mock authentication\n          if (err.isNetworkError || ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 404) {\n            console.warn('Auth check failed with server, using mock data');\n            const mockUser = JSON.parse(localStorage.getItem('user'));\n            if (mockUser) {\n              setUser(mockUser);\n            } else {\n              throw new Error('No user session found');\n            }\n          } else {\n            // Other errors (invalid token, etc.)\n            throw err;\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n      // Only clear if it's an actual auth error, not a network error\n      if (!err.isNetworkError) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n\n      // For testing/development - check mock database first\n      const mockUser = MOCK_USERS.find(u => u.email.toLowerCase() === email.toLowerCase());\n      if (mockUser) {\n        // Found user in mock database, verify password\n        if (mockUser.password === password) {\n          console.log('Mock login successful for:', email);\n\n          // Create a clean version without password\n          const {\n            password,\n            ...userWithoutPassword\n          } = mockUser;\n          const mockToken = `mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n          setUser(userWithoutPassword);\n          return userWithoutPassword;\n        } else {\n          // Password doesn't match\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        }\n      }\n\n      // If not found in mock database or if we want to try real API\n      try {\n        const response = await api.post('/auth/login', {\n          email,\n          password\n        });\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        var _apiError$response, _apiError$response2, _apiError$response3;\n        // If network error or API not available, use mock login as fallback\n        if (apiError.isNetworkError || ((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.status) === 404) {\n          console.warn('Login API unavailable, using mock login fallback');\n\n          // If we already checked mock database above and didn't find match\n          // Just throw the error\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        } else if (((_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : _apiError$response2.status) === 401) {\n          // Handle unauthorized explicitly\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        } else if (((_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.status) === 429) {\n          // Handle rate limiting\n          throw new Error('Too many login attempts. Please try again later.');\n        } else {\n          var _apiError$response4, _apiError$response4$d;\n          // Server responded with another error\n          throw new Error(((_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : (_apiError$response4$d = _apiError$response4.data) === null || _apiError$response4$d === void 0 ? void 0 : _apiError$response4$d.message) || 'Login failed. Please try again.');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const loginWithGoogle = async () => {\n    try {\n      setError(null);\n\n      // In a real implementation, we would get the code from the redirect\n      // Here we'll simulate the process for demonstration\n\n      try {\n        // 1. Redirect users to Google's OAuth page\n        const googleAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${GOOGLE_REDIRECT_URI}&response_type=code&scope=email%20profile&prompt=select_account`;\n\n        // For the purpose of this example, we'll open in the same window\n        window.location.href = googleAuthUrl;\n\n        // The rest of this function would normally be executed after redirect back\n        // But for demo purposes we'll simulate a successful authentication\n\n        // Mock user for demonstration (would come from the API in real implementation)\n        const mockGoogleUser = {\n          id: 'google-123456',\n          name: 'Google User',\n          email: 'googleuser@example.com',\n          picture: 'https://via.placeholder.com/150',\n          role: 'user',\n          authProvider: 'google'\n        };\n        const mockToken = `google-mock-token-${Date.now()}`;\n        localStorage.setItem('token', mockToken);\n        localStorage.setItem('user', JSON.stringify(mockGoogleUser));\n        setUser(mockGoogleUser);\n        return mockGoogleUser;\n      } catch (apiError) {\n        var _apiError$response5;\n        if (apiError.isNetworkError || ((_apiError$response5 = apiError.response) === null || _apiError$response5 === void 0 ? void 0 : _apiError$response5.status) === 404) {\n          console.warn('Google login API unavailable, using mock login');\n\n          // Create mock user for Google auth\n          const mockGoogleUser = {\n            id: 'google-' + Date.now().toString(),\n            name: 'Google User',\n            email: 'google_user@example.com',\n            picture: 'https://via.placeholder.com/150',\n            role: 'user',\n            authProvider: 'google'\n          };\n          const mockToken = `google-mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockGoogleUser));\n          setUser(mockGoogleUser);\n          return mockGoogleUser;\n        } else {\n          var _apiError$response6, _apiError$response6$d;\n          // Server responded with an error\n          throw new Error(((_apiError$response6 = apiError.response) === null || _apiError$response6 === void 0 ? void 0 : (_apiError$response6$d = _apiError$response6.data) === null || _apiError$response6$d === void 0 ? void 0 : _apiError$response6$d.message) || 'Google authentication failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Google login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const register = async userData => {\n    try {\n      setError(null);\n      try {\n        const response = await api.post('/auth/register', userData);\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        var _apiError$response7, _apiError$response8, _apiError$response9, _apiError$response9$d;\n        // If network error or API not available, use mock registration\n        if (apiError.isNetworkError || ((_apiError$response7 = apiError.response) === null || _apiError$response7 === void 0 ? void 0 : _apiError$response7.status) === 404) {\n          console.warn('Register API unavailable, using mock registration');\n\n          // Check if email already exists in mock database\n          if (MOCK_USERS.some(u => u.email === userData.email)) {\n            throw new Error('Email address is already registered. Please use a different email or try logging in.');\n          }\n\n          // Create mock user\n          const mockUser = {\n            id: Date.now().toString(),\n            name: userData.name,\n            email: userData.email,\n            role: 'user'\n          };\n          const mockToken = `mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n\n          // Add to mock database (would not be needed in real app)\n          MOCK_USERS.push({\n            ...mockUser,\n            password: userData.password\n          });\n          return mockUser;\n        } else if (((_apiError$response8 = apiError.response) === null || _apiError$response8 === void 0 ? void 0 : _apiError$response8.status) === 409) {\n          // Conflict - Email already exists\n          throw new Error('Email address is already registered. Please use a different email or try logging in.');\n        } else if ((_apiError$response9 = apiError.response) !== null && _apiError$response9 !== void 0 && (_apiError$response9$d = _apiError$response9.data) !== null && _apiError$response9$d !== void 0 && _apiError$response9$d.message && apiError.response.data.message.includes('Username already taken')) {\n          // If it's a username error, convert it to an email error to be consistent\n          throw new Error('Email address is already registered. Please use a different email or try logging in.');\n        } else {\n          var _apiError$response10, _apiError$response10$;\n          // Server responded with an error\n          throw new Error(((_apiError$response10 = apiError.response) === null || _apiError$response10 === void 0 ? void 0 : (_apiError$response10$ = _apiError$response10.data) === null || _apiError$response10$ === void 0 ? void 0 : _apiError$response10$.message) || 'Registration failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n\n  // Mock authenticated user for development\n  const mockUser = {\n    id: '123456',\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    mobile: '+1 (555) 123-4567',\n    address: {\n      street: '123 Main St',\n      city: 'New York',\n      state: 'NY',\n      zipcode: '10001',\n      country: 'USA'\n    },\n    createdAt: new Date(2023, 0, 15),\n    // January 15, 2023\n    favorites: {\n      restaurants: [],\n      items: []\n    }\n  };\n\n  // Function to toggle favorites (add or remove)\n  const toggleFavorite = (itemId, type) => {\n    if (!user) return;\n    setUser(currentUser => {\n      const favorites = {\n        ...currentUser.favorites\n      };\n      const collection = type === 'restaurant' ? 'restaurants' : 'items';\n      const index = favorites[collection].indexOf(itemId);\n      if (index === -1) {\n        // Add to favorites\n        favorites[collection] = [...favorites[collection], itemId];\n      } else {\n        // Remove from favorites\n        favorites[collection] = favorites[collection].filter(id => id !== itemId);\n      }\n      return {\n        ...currentUser,\n        favorites\n      };\n    });\n\n    // In a real app, you'd save to the backend here\n    // saveToBackend(user.id, user.favorites);\n  };\n\n  // Check if an item is in favorites\n  const isFavorite = (itemId, type) => {\n    if (!user) return false;\n    const collection = type === 'restaurant' ? 'restaurants' : 'items';\n    return user.favorites[collection].includes(itemId);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    loginWithGoogle,\n    register,\n    logout,\n    toggleFavorite,\n    isFavorite\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"d1+zLFPuYCTHzOWgvgMVqQqBcrg=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","useNavigate","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","GOOGLE_CLIENT_ID","REACT_APP_GOOGLE_CLIENT_ID","GOOGLE_REDIRECT_URI","REACT_APP_GOOGLE_REDIRECT_URI","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","code","console","warn","isNetworkError","AuthContext","MOCK_USERS","id","name","email","password","role","AuthProvider","children","_s","user","setUser","loading","setLoading","setError","navigate","checkAuth","get","data","err","_err$response","status","mockUser","JSON","parse","Error","removeItem","login","find","u","toLowerCase","log","userWithoutPassword","mockToken","Date","now","setItem","stringify","post","apiError","_apiError$response","_apiError$response2","_apiError$response3","_apiError$response4","_apiError$response4$d","message","errorMessage","loginWithGoogle","googleAuthUrl","window","location","href","mockGoogleUser","picture","authProvider","_apiError$response5","toString","_apiError$response6","_apiError$response6$d","register","userData","_apiError$response7","_apiError$response8","_apiError$response9","_apiError$response9$d","some","push","includes","_apiError$response10","_apiError$response10$","logout","mobile","address","street","city","state","zipcode","country","createdAt","favorites","restaurants","items","toggleFavorite","itemId","type","currentUser","collection","index","indexOf","filter","isFavorite","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/HP/Food Delivery project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\n\n// Create a baseURL that can be easily changed for different environments\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Google OAuth Configuration - would typically come from environment variables\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '486416947192-v72oq2gu28e25oqfg5rhnfgfnj85nmlg.apps.googleusercontent.com';\nconst GOOGLE_REDIRECT_URI = process.env.REACT_APP_GOOGLE_REDIRECT_URI || 'http://localhost:3000/auth/google/callback';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 8000, // Reduced timeout for faster error response\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle network errors (server not running)\n    if (error.code === 'ERR_NETWORK' || !error.response) {\n      console.warn('Network error detected, server might be down');\n      error.isNetworkError = true;\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst AuthContext = createContext(null);\n\n// Mock users database for development\nconst MOCK_USERS = [\n  {\n    id: '1',\n    name: 'Aarchi Patel',\n    email: 'patel.aarchi.sanjay@gmail.com',\n    password: 'password',\n    role: 'user'\n  },\n  {\n    id: '2',\n    name: 'Test User',\n    email: 'user@example.com',\n    password: 'password',\n    role: 'user'\n  },\n  {\n    id: '3',\n    name: 'Raksha',\n    email: 'raksha123@gmail.com',\n    password: 'password123',\n    role: 'user'\n  }\n];\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await api.get('/auth/me');\n          setUser(response.data);\n        } catch (err) {\n          // If network error or API not available, try mock authentication\n          if (err.isNetworkError || err.response?.status === 404) {\n            console.warn('Auth check failed with server, using mock data');\n            const mockUser = JSON.parse(localStorage.getItem('user'));\n            if (mockUser) {\n              setUser(mockUser);\n            } else {\n              throw new Error('No user session found');\n            }\n          } else {\n            // Other errors (invalid token, etc.)\n            throw err;\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n      // Only clear if it's an actual auth error, not a network error\n      if (!err.isNetworkError) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      \n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n      \n      // For testing/development - check mock database first\n      const mockUser = MOCK_USERS.find(\n        u => u.email.toLowerCase() === email.toLowerCase()\n      );\n      \n      if (mockUser) {\n        // Found user in mock database, verify password\n        if (mockUser.password === password) {\n          console.log('Mock login successful for:', email);\n          \n          // Create a clean version without password\n          const { password, ...userWithoutPassword } = mockUser;\n          const mockToken = `mock-token-${Date.now()}`;\n          \n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n          setUser(userWithoutPassword);\n          return userWithoutPassword;\n        } else {\n          // Password doesn't match\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        }\n      }\n      \n      // If not found in mock database or if we want to try real API\n      try {\n        const response = await api.post('/auth/login', { email, password });\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        // If network error or API not available, use mock login as fallback\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Login API unavailable, using mock login fallback');\n          \n          // If we already checked mock database above and didn't find match\n          // Just throw the error\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        } else if (apiError.response?.status === 401) {\n          // Handle unauthorized explicitly\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        } else if (apiError.response?.status === 429) {\n          // Handle rate limiting\n          throw new Error('Too many login attempts. Please try again later.');\n        } else {\n          // Server responded with another error\n          throw new Error(apiError.response?.data?.message || 'Login failed. Please try again.');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const loginWithGoogle = async () => {\n    try {\n      setError(null);\n      \n      // In a real implementation, we would get the code from the redirect\n      // Here we'll simulate the process for demonstration\n      \n      try {\n        // 1. Redirect users to Google's OAuth page\n        const googleAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${GOOGLE_REDIRECT_URI}&response_type=code&scope=email%20profile&prompt=select_account`;\n        \n        // For the purpose of this example, we'll open in the same window\n        window.location.href = googleAuthUrl;\n        \n        // The rest of this function would normally be executed after redirect back\n        // But for demo purposes we'll simulate a successful authentication\n        \n        // Mock user for demonstration (would come from the API in real implementation)\n        const mockGoogleUser = {\n          id: 'google-123456',\n          name: 'Google User',\n          email: 'googleuser@example.com',\n          picture: 'https://via.placeholder.com/150',\n          role: 'user',\n          authProvider: 'google'\n        };\n        \n        const mockToken = `google-mock-token-${Date.now()}`;\n        localStorage.setItem('token', mockToken);\n        localStorage.setItem('user', JSON.stringify(mockGoogleUser));\n        setUser(mockGoogleUser);\n        \n        return mockGoogleUser;\n      } catch (apiError) {\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Google login API unavailable, using mock login');\n          \n          // Create mock user for Google auth\n          const mockGoogleUser = {\n            id: 'google-' + Date.now().toString(),\n            name: 'Google User',\n            email: 'google_user@example.com',\n            picture: 'https://via.placeholder.com/150',\n            role: 'user',\n            authProvider: 'google'\n          };\n          \n          const mockToken = `google-mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockGoogleUser));\n          setUser(mockGoogleUser);\n          \n          return mockGoogleUser;\n        } else {\n          // Server responded with an error\n          throw new Error(apiError.response?.data?.message || 'Google authentication failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Google login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setError(null);\n      \n      try {\n        const response = await api.post('/auth/register', userData);\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        // If network error or API not available, use mock registration\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Register API unavailable, using mock registration');\n          \n          // Check if email already exists in mock database\n          if (MOCK_USERS.some(u => u.email === userData.email)) {\n            throw new Error('Email address is already registered. Please use a different email or try logging in.');\n          }\n          \n          // Create mock user\n          const mockUser = {\n            id: Date.now().toString(),\n            name: userData.name,\n            email: userData.email,\n            role: 'user'\n          };\n          \n          const mockToken = `mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n          \n          // Add to mock database (would not be needed in real app)\n          MOCK_USERS.push({\n            ...mockUser,\n            password: userData.password\n          });\n          \n          return mockUser;\n        } else if (apiError.response?.status === 409) {\n          // Conflict - Email already exists\n          throw new Error('Email address is already registered. Please use a different email or try logging in.');\n        } else if (apiError.response?.data?.message && apiError.response.data.message.includes('Username already taken')) {\n          // If it's a username error, convert it to an email error to be consistent\n          throw new Error('Email address is already registered. Please use a different email or try logging in.');\n        } else {\n          // Server responded with an error\n          throw new Error(apiError.response?.data?.message || 'Registration failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n\n  // Mock authenticated user for development\n  const mockUser = {\n    id: '123456',\n    name: 'John Doe',\n    email: 'john.doe@example.com',\n    mobile: '+1 (555) 123-4567',\n    address: {\n      street: '123 Main St',\n      city: 'New York',\n      state: 'NY',\n      zipcode: '10001',\n      country: 'USA'\n    },\n    createdAt: new Date(2023, 0, 15), // January 15, 2023\n    favorites: {\n      restaurants: [],\n      items: []\n    }\n  };\n  \n  // Function to toggle favorites (add or remove)\n  const toggleFavorite = (itemId, type) => {\n    if (!user) return;\n    \n    setUser((currentUser) => {\n      const favorites = {...currentUser.favorites};\n      const collection = type === 'restaurant' ? 'restaurants' : 'items';\n      const index = favorites[collection].indexOf(itemId);\n      \n      if (index === -1) {\n        // Add to favorites\n        favorites[collection] = [...favorites[collection], itemId];\n      } else {\n        // Remove from favorites\n        favorites[collection] = favorites[collection].filter(id => id !== itemId);\n      }\n      \n      return {\n        ...currentUser,\n        favorites\n      };\n    });\n    \n    // In a real app, you'd save to the backend here\n    // saveToBackend(user.id, user.favorites);\n  };\n  \n  // Check if an item is in favorites\n  const isFavorite = (itemId, type) => {\n    if (!user) return false;\n    const collection = type === 'restaurant' ? 'restaurants' : 'items';\n    return user.favorites[collection].includes(itemId);\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    loginWithGoogle,\n    register,\n    logout,\n    toggleFavorite,\n    isFavorite\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}