{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Food Delivery project\\\\client\\\\src\\\\context\\\\OrderContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useAuth } from './AuthContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OrderContext = /*#__PURE__*/createContext();\nexport const useOrders = () => {\n  _s();\n  return useContext(OrderContext);\n};\n_s(useOrders, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const OrderProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user\n  } = useAuth();\n  const [orders, setOrders] = useState([]);\n  const [activeOrder, setActiveOrder] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load orders from localStorage on mount\n  useEffect(() => {\n    if (user) {\n      const storedOrders = localStorage.getItem('orders');\n      if (storedOrders) {\n        try {\n          const parsedOrders = JSON.parse(storedOrders);\n          setOrders(parsedOrders);\n\n          // Find active order (if any)\n          const active = parsedOrders.find(order => ['confirmed', 'preparing', 'in_delivery'].includes(order.status));\n          if (active) {\n            setActiveOrder(active);\n          }\n        } catch (err) {\n          console.error('Failed to parse orders data:', err);\n        }\n      } else {\n        // Create mock orders for demo if none exist\n        const mockOrders = generateMockOrders();\n        setOrders(mockOrders);\n\n        // Set the first order as active for demo purposes\n        if (mockOrders.length > 0) {\n          const activeOrder = mockOrders.find(order => order.status === 'in_delivery');\n          setActiveOrder(activeOrder || null);\n        }\n\n        // Save to localStorage\n        localStorage.setItem('orders', JSON.stringify(mockOrders));\n      }\n    }\n  }, [user]);\n  const generateMockOrders = () => {\n    // Create mock orders for demonstration purposes\n    return [{\n      id: 'ORD12345',\n      restaurant: {\n        id: 'rest1',\n        name: 'Pizza Palace',\n        image: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80'\n      },\n      items: [{\n        id: 'item1',\n        name: 'Margherita Pizza',\n        quantity: 1,\n        price: 199\n      }, {\n        id: 'item2',\n        name: 'Garlic Bread',\n        quantity: 1,\n        price: 99\n      }],\n      total: 298,\n      status: 'in_delivery',\n      estimatedDelivery: '15 min',\n      deliveryAddress: '42, Gopal Krishna Society, Athwa, Surat',\n      placedAt: '2023-04-12 19:30',\n      paymentMethod: 'Card',\n      deliveryPerson: {\n        name: 'Raj Kumar',\n        phone: '+91 98765 43210',\n        photo: 'https://randomuser.me/api/portraits/men/22.jpg'\n      }\n    }, {\n      id: 'ORD12344',\n      restaurant: {\n        id: 'rest2',\n        name: 'Burger King',\n        image: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80'\n      },\n      items: [{\n        id: 'item3',\n        name: 'Whopper',\n        quantity: 1,\n        price: 129\n      }, {\n        id: 'item4',\n        name: 'French Fries',\n        quantity: 1,\n        price: 79\n      }],\n      total: 208,\n      status: 'delivered',\n      deliveryAddress: '42, Gopal Krishna Society, Athwa, Surat',\n      placedAt: '2023-04-10 13:15',\n      paymentMethod: 'Cash'\n    }, {\n      id: 'ORD12343',\n      restaurant: {\n        id: 'rest3',\n        name: 'Tasty Bites',\n        image: 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80'\n      },\n      items: [{\n        id: 'item5',\n        name: 'Paneer Tikka',\n        quantity: 1,\n        price: 249\n      }, {\n        id: 'item6',\n        name: 'Butter Naan',\n        quantity: 2,\n        price: 30\n      }],\n      total: 309,\n      status: 'delivered',\n      deliveryAddress: '42, Gopal Krishna Society, Athwa, Surat',\n      placedAt: '2023-04-05 20:30',\n      paymentMethod: 'UPI'\n    }];\n  };\n  const placeOrder = async orderData => {\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, call your API to create the order\n      // const response = await axios.post('/api/orders', orderData);\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Generate order with unique ID\n      const newOrder = {\n        id: `ORD${Math.floor(Math.random() * 10000)}`,\n        ...orderData,\n        status: 'confirmed',\n        placedAt: new Date().toLocaleString()\n      };\n\n      // Update orders state\n      const updatedOrders = [newOrder, ...orders];\n      setOrders(updatedOrders);\n      setActiveOrder(newOrder);\n\n      // Save to localStorage\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      setLoading(false);\n      return {\n        success: true,\n        orderId: newOrder.id\n      };\n    } catch (err) {\n      setError('Failed to place order');\n      setLoading(false);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const getOrderById = orderId => {\n    return orders.find(order => order.id === orderId) || null;\n  };\n  const getActiveOrder = () => {\n    return activeOrder;\n  };\n  const updateOrderStatus = async (orderId, newStatus) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // In a real app, call your API to update the order status\n      // const response = await axios.put(`/api/orders/${orderId}/status`, { status: newStatus });\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // Update order status in state\n      const updatedOrders = orders.map(order => {\n        if (order.id === orderId) {\n          const updatedOrder = {\n            ...order,\n            status: newStatus\n          };\n\n          // Update active order if necessary\n          if (activeOrder && activeOrder.id === orderId) {\n            if (newStatus === 'delivered' || newStatus === 'cancelled') {\n              setActiveOrder(null);\n            } else {\n              setActiveOrder(updatedOrder);\n            }\n          }\n          return updatedOrder;\n        }\n        return order;\n      });\n      setOrders(updatedOrders);\n\n      // Save to localStorage\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\n      setLoading(false);\n      return {\n        success: true\n      };\n    } catch (err) {\n      setError('Failed to update order status');\n      setLoading(false);\n      return {\n        success: false,\n        error: err.message\n      };\n    }\n  };\n  const cancelOrder = async orderId => {\n    return updateOrderStatus(orderId, 'cancelled');\n  };\n  const value = {\n    orders,\n    activeOrder,\n    loading,\n    error,\n    placeOrder,\n    getOrderById,\n    getActiveOrder,\n    updateOrderStatus,\n    cancelOrder\n  };\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 10\n  }, this);\n};\n_s2(OrderProvider, \"vGcMazavRz080/Vn6wwdeZgp+zQ=\", false, function () {\n  return [useAuth];\n});\n_c = OrderProvider;\nexport default OrderContext;\nvar _c;\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useAuth","jsxDEV","_jsxDEV","OrderContext","useOrders","_s","OrderProvider","children","_s2","user","orders","setOrders","activeOrder","setActiveOrder","loading","setLoading","error","setError","storedOrders","localStorage","getItem","parsedOrders","JSON","parse","active","find","order","includes","status","err","console","mockOrders","generateMockOrders","length","setItem","stringify","id","restaurant","name","image","items","quantity","price","total","estimatedDelivery","deliveryAddress","placedAt","paymentMethod","deliveryPerson","phone","photo","placeOrder","orderData","Promise","resolve","setTimeout","newOrder","Math","floor","random","Date","toLocaleString","updatedOrders","success","orderId","message","getOrderById","getActiveOrder","updateOrderStatus","newStatus","map","updatedOrder","cancelOrder","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Food Delivery project/client/src/context/OrderContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext.js';\r\n\r\nconst OrderContext = createContext();\r\n\r\nexport const useOrders = () => useContext(OrderContext);\r\n\r\nexport const OrderProvider = ({ children }) => {\r\n  const { user } = useAuth();\r\n  const [orders, setOrders] = useState([]);\r\n  const [activeOrder, setActiveOrder] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load orders from localStorage on mount\r\n  useEffect(() => {\r\n    if (user) {\r\n      const storedOrders = localStorage.getItem('orders');\r\n      if (storedOrders) {\r\n        try {\r\n          const parsedOrders = JSON.parse(storedOrders);\r\n          setOrders(parsedOrders);\r\n          \r\n          // Find active order (if any)\r\n          const active = parsedOrders.find(order => \r\n            ['confirmed', 'preparing', 'in_delivery'].includes(order.status)\r\n          );\r\n          if (active) {\r\n            setActiveOrder(active);\r\n          }\r\n        } catch (err) {\r\n          console.error('Failed to parse orders data:', err);\r\n        }\r\n      } else {\r\n        // Create mock orders for demo if none exist\r\n        const mockOrders = generateMockOrders();\r\n        setOrders(mockOrders);\r\n        \r\n        // Set the first order as active for demo purposes\r\n        if (mockOrders.length > 0) {\r\n          const activeOrder = mockOrders.find(order => order.status === 'in_delivery');\r\n          setActiveOrder(activeOrder || null);\r\n        }\r\n        \r\n        // Save to localStorage\r\n        localStorage.setItem('orders', JSON.stringify(mockOrders));\r\n      }\r\n    }\r\n  }, [user]);\r\n\r\n  const generateMockOrders = () => {\r\n    // Create mock orders for demonstration purposes\r\n    return [\r\n      {\r\n        id: 'ORD12345',\r\n        restaurant: {\r\n          id: 'rest1',\r\n          name: 'Pizza Palace',\r\n          image: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80'\r\n        },\r\n        items: [\r\n          { id: 'item1', name: 'Margherita Pizza', quantity: 1, price: 199 },\r\n          { id: 'item2', name: 'Garlic Bread', quantity: 1, price: 99 }\r\n        ],\r\n        total: 298,\r\n        status: 'in_delivery',\r\n        estimatedDelivery: '15 min',\r\n        deliveryAddress: '42, Gopal Krishna Society, Athwa, Surat',\r\n        placedAt: '2023-04-12 19:30',\r\n        paymentMethod: 'Card',\r\n        deliveryPerson: {\r\n          name: 'Raj Kumar',\r\n          phone: '+91 98765 43210',\r\n          photo: 'https://randomuser.me/api/portraits/men/22.jpg'\r\n        }\r\n      },\r\n      {\r\n        id: 'ORD12344',\r\n        restaurant: {\r\n          id: 'rest2',\r\n          name: 'Burger King',\r\n          image: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80'\r\n        },\r\n        items: [\r\n          { id: 'item3', name: 'Whopper', quantity: 1, price: 129 },\r\n          { id: 'item4', name: 'French Fries', quantity: 1, price: 79 }\r\n        ],\r\n        total: 208,\r\n        status: 'delivered',\r\n        deliveryAddress: '42, Gopal Krishna Society, Athwa, Surat',\r\n        placedAt: '2023-04-10 13:15',\r\n        paymentMethod: 'Cash',\r\n      },\r\n      {\r\n        id: 'ORD12343',\r\n        restaurant: {\r\n          id: 'rest3',\r\n          name: 'Tasty Bites',\r\n          image: 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80'\r\n        },\r\n        items: [\r\n          { id: 'item5', name: 'Paneer Tikka', quantity: 1, price: 249 },\r\n          { id: 'item6', name: 'Butter Naan', quantity: 2, price: 30 }\r\n        ],\r\n        total: 309,\r\n        status: 'delivered',\r\n        deliveryAddress: '42, Gopal Krishna Society, Athwa, Surat',\r\n        placedAt: '2023-04-05 20:30',\r\n        paymentMethod: 'UPI',\r\n      }\r\n    ];\r\n  };\r\n\r\n  const placeOrder = async (orderData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // In a real app, call your API to create the order\r\n      // const response = await axios.post('/api/orders', orderData);\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Generate order with unique ID\r\n      const newOrder = {\r\n        id: `ORD${Math.floor(Math.random() * 10000)}`,\r\n        ...orderData,\r\n        status: 'confirmed',\r\n        placedAt: new Date().toLocaleString(),\r\n      };\r\n      \r\n      // Update orders state\r\n      const updatedOrders = [newOrder, ...orders];\r\n      setOrders(updatedOrders);\r\n      setActiveOrder(newOrder);\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\r\n      \r\n      setLoading(false);\r\n      return { success: true, orderId: newOrder.id };\r\n    } catch (err) {\r\n      setError('Failed to place order');\r\n      setLoading(false);\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n\r\n  const getOrderById = (orderId) => {\r\n    return orders.find(order => order.id === orderId) || null;\r\n  };\r\n\r\n  const getActiveOrder = () => {\r\n    return activeOrder;\r\n  };\r\n\r\n  const updateOrderStatus = async (orderId, newStatus) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // In a real app, call your API to update the order status\r\n      // const response = await axios.put(`/api/orders/${orderId}/status`, { status: newStatus });\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 500));\r\n      \r\n      // Update order status in state\r\n      const updatedOrders = orders.map(order => {\r\n        if (order.id === orderId) {\r\n          const updatedOrder = { ...order, status: newStatus };\r\n          \r\n          // Update active order if necessary\r\n          if (activeOrder && activeOrder.id === orderId) {\r\n            if (newStatus === 'delivered' || newStatus === 'cancelled') {\r\n              setActiveOrder(null);\r\n            } else {\r\n              setActiveOrder(updatedOrder);\r\n            }\r\n          }\r\n          \r\n          return updatedOrder;\r\n        }\r\n        return order;\r\n      });\r\n      \r\n      setOrders(updatedOrders);\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem('orders', JSON.stringify(updatedOrders));\r\n      \r\n      setLoading(false);\r\n      return { success: true };\r\n    } catch (err) {\r\n      setError('Failed to update order status');\r\n      setLoading(false);\r\n      return { success: false, error: err.message };\r\n    }\r\n  };\r\n\r\n  const cancelOrder = async (orderId) => {\r\n    return updateOrderStatus(orderId, 'cancelled');\r\n  };\r\n\r\n  const value = {\r\n    orders,\r\n    activeOrder,\r\n    loading,\r\n    error,\r\n    placeOrder,\r\n    getOrderById,\r\n    getActiveOrder,\r\n    updateOrderStatus,\r\n    cancelOrder\r\n  };\r\n\r\n  return <OrderContext.Provider value={value}>{children}</OrderContext.Provider>;\r\n};\r\n\r\nexport default OrderContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}