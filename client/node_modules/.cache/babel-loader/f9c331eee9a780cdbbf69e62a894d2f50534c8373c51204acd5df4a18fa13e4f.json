{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import axios from'axios';// Create a baseURL that can be easily changed for different environments\nimport{jsx as _jsx}from\"react/jsx-runtime\";const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:5001/api';// Google OAuth Configuration - would typically come from environment variables\nconst GOOGLE_CLIENT_ID=process.env.REACT_APP_GOOGLE_CLIENT_ID||'486416947192-v72oq2gu28e25oqfg5rhnfgfnj85nmlg.apps.googleusercontent.com';const GOOGLE_REDIRECT_URI=process.env.REACT_APP_GOOGLE_REDIRECT_URI||'http://localhost:3000/auth/google/callback';// Configure axios defaults\nconst api=axios.create({baseURL:API_BASE_URL,timeout:8000,// Reduced timeout for faster error response\nheaders:{'Content-Type':'application/json'}});// Add request interceptor to include auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Add response interceptor to handle common errors\napi.interceptors.response.use(response=>response,error=>{// Handle network errors (server not running)\nif(error.code==='ERR_NETWORK'||!error.response){console.warn('Network error detected, server might be down');error.isNetworkError=true;}return Promise.reject(error);});const AuthContext=/*#__PURE__*/createContext(null);// Mock users database for development\nconst MOCK_USERS=[{id:'1',name:'Aarchi Patel',email:'patel.aarchi.sanjay@gmail.com',password:'password',role:'user'},{id:'2',name:'Test User',email:'user@example.com',password:'password',role:'user'},{id:'3',name:'Raksha',email:'raksha123@gmail.com',password:'password123',role:'user'}];export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[isAuthenticated,setIsAuthenticated]=useState(false);useEffect(()=>{checkAuth();},[]);const checkAuth=async()=>{try{const token=localStorage.getItem('token');if(token){try{const response=await api.get('/auth/me',{headers:{Authorization:`Bearer ${token}`}});setUser(response.data);setIsAuthenticated(true);// ✅ Mark as authenticated\n}catch(err){var _err$response;// If network error or API not available, try mock authentication\nif(err.isNetworkError||((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.status)===404){console.warn('Auth check failed with server, using mock data');const mockUser=JSON.parse(localStorage.getItem('user'));if(mockUser){setUser(mockUser);setIsAuthenticated(true);// ✅ Still authenticated (mock)\n}else{setIsAuthenticated(false);// ❌ No user found\nthrow new Error('No user session found');}}else{setIsAuthenticated(false);// ❌ Token error or other issue\nthrow err;}}}else{setIsAuthenticated(false);// ❌ No token at all\n}}catch(err){console.error('Auth check failed:',err);if(!err.isNetworkError){localStorage.removeItem('token');localStorage.removeItem('user');}setIsAuthenticated(false);// ❌ Final fallback\n}finally{setLoading(false);}};const login=async(email,password)=>{try{setError(null);if(!email||!password){throw new Error('Email and password are required');}// For testing/development - check mock database first\nconst mockUser=MOCK_USERS.find(u=>u.email.toLowerCase()===email.toLowerCase());if(mockUser){// Found user in mock database, verify password\nif(mockUser.password===password){console.log('Mock login successful for:',email);// Create a clean version without password\nconst{password,...userWithoutPassword}=mockUser;const mockToken=`mock-token-${Date.now()}`;localStorage.setItem('token',mockToken);localStorage.setItem('user',JSON.stringify(userWithoutPassword));setUser(userWithoutPassword);return userWithoutPassword;}else{// Password doesn't match\nthrow new Error('Invalid email or password. Please check your credentials and try again.');}}// If not found in mock database or if we want to try real API\ntry{const response=await api.post('/auth/login',{email,password});const{token,user}=response.data;localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));setUser(user);return user;}catch(apiError){var _apiError$response,_apiError$response2,_apiError$response3;// If network error or API not available, use mock login as fallback\nif(apiError.isNetworkError||((_apiError$response=apiError.response)===null||_apiError$response===void 0?void 0:_apiError$response.status)===404){console.warn('Login API unavailable, using mock login fallback');// If we already checked mock database above and didn't find match\n// Just throw the error\nthrow new Error('Invalid email or password. Please check your credentials and try again.');}else if(((_apiError$response2=apiError.response)===null||_apiError$response2===void 0?void 0:_apiError$response2.status)===401){// Handle unauthorized explicitly\nthrow new Error('Invalid email or password. Please check your credentials and try again.');}else if(((_apiError$response3=apiError.response)===null||_apiError$response3===void 0?void 0:_apiError$response3.status)===429){// Handle rate limiting\nthrow new Error('Too many login attempts. Please try again later.');}else{var _apiError$response4,_apiError$response4$d;// Server responded with another error\nthrow new Error(((_apiError$response4=apiError.response)===null||_apiError$response4===void 0?void 0:(_apiError$response4$d=_apiError$response4.data)===null||_apiError$response4$d===void 0?void 0:_apiError$response4$d.message)||'Login failed. Please try again.');}}}catch(err){const errorMessage=err.message||'Login failed';setError(errorMessage);throw new Error(errorMessage);}};const loginWithGoogle=async()=>{try{setError(null);// In a real implementation, we would get the code from the redirect\n// Here we'll simulate the process for demonstration\ntry{// 1. Redirect users to Google's OAuth page\nconst googleAuthUrl=`https://accounts.google.com/o/oauth2/v2/auth?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${GOOGLE_REDIRECT_URI}&response_type=code&scope=email%20profile&prompt=select_account`;// For the purpose of this example, we'll open in the same window\nwindow.location.href=googleAuthUrl;// The rest of this function would normally be executed after redirect back\n// But for demo purposes we'll simulate a successful authentication\n// Mock user for demonstration (would come from the API in real implementation)\nconst mockGoogleUser={id:'google-123456',name:'Google User',email:'googleuser@example.com',picture:'https://via.placeholder.com/150',role:'user',authProvider:'google'};const mockToken=`google-mock-token-${Date.now()}`;localStorage.setItem('token',mockToken);localStorage.setItem('user',JSON.stringify(mockGoogleUser));setUser(mockGoogleUser);return mockGoogleUser;}catch(apiError){var _apiError$response5;if(apiError.isNetworkError||((_apiError$response5=apiError.response)===null||_apiError$response5===void 0?void 0:_apiError$response5.status)===404){console.warn('Google login API unavailable, using mock login');// Create mock user for Google auth\nconst mockGoogleUser={id:'google-'+Date.now().toString(),name:'Google User',email:'google_user@example.com',picture:'https://via.placeholder.com/150',role:'user',authProvider:'google'};const mockToken=`google-mock-token-${Date.now()}`;localStorage.setItem('token',mockToken);localStorage.setItem('user',JSON.stringify(mockGoogleUser));setUser(mockGoogleUser);return mockGoogleUser;}else{var _apiError$response6,_apiError$response6$d;// Server responded with an error\nthrow new Error(((_apiError$response6=apiError.response)===null||_apiError$response6===void 0?void 0:(_apiError$response6$d=_apiError$response6.data)===null||_apiError$response6$d===void 0?void 0:_apiError$response6$d.message)||'Google authentication failed');}}}catch(err){const errorMessage=err.message||'Google login failed';setError(errorMessage);throw new Error(errorMessage);}};const register=async userData=>{try{setError(null);try{const response=await api.post('/auth/register',userData);const{token,user}=response.data;localStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(user));setUser(user);return user;}catch(apiError){var _apiError$response7,_apiError$response8,_apiError$response9,_apiError$response9$d;// If network error or API not available, use mock registration\nif(apiError.isNetworkError||((_apiError$response7=apiError.response)===null||_apiError$response7===void 0?void 0:_apiError$response7.status)===404){console.warn('Register API unavailable, using mock registration');// Check if email already exists in mock database\nif(MOCK_USERS.some(u=>u.email===userData.email)){throw new Error('Email address is already registered. Please use a different email or try logging in.');}// Create mock user\nconst mockUser={id:Date.now().toString(),name:userData.name,email:userData.email,role:'user'};const mockToken=`mock-token-${Date.now()}`;localStorage.setItem('token',mockToken);localStorage.setItem('user',JSON.stringify(mockUser));setUser(mockUser);// Add to mock database (would not be needed in real app)\nMOCK_USERS.push({...mockUser,password:userData.password});return mockUser;}else if(((_apiError$response8=apiError.response)===null||_apiError$response8===void 0?void 0:_apiError$response8.status)===409){// Conflict - Email already exists\nthrow new Error('Email address is already registered. Please use a different email or try logging in.');}else if((_apiError$response9=apiError.response)!==null&&_apiError$response9!==void 0&&(_apiError$response9$d=_apiError$response9.data)!==null&&_apiError$response9$d!==void 0&&_apiError$response9$d.message&&apiError.response.data.message.includes('Username already taken')){// If it's a username error, convert it to an email error to be consistent\nthrow new Error('Email address is already registered. Please use a different email or try logging in.');}else{var _apiError$response10,_apiError$response10$;// Server responded with an error\nthrow new Error(((_apiError$response10=apiError.response)===null||_apiError$response10===void 0?void 0:(_apiError$response10$=_apiError$response10.data)===null||_apiError$response10$===void 0?void 0:_apiError$response10$.message)||'Registration failed');}}}catch(err){const errorMessage=err.message||'Registration failed';setError(errorMessage);throw new Error(errorMessage);}};const logout=()=>{localStorage.removeItem('token');localStorage.removeItem('user');setUser(null);setError(null);};const updateUser=updatedData=>{if(!user)return null;// Create updated user object\nconst updatedUser={...user,...updatedData};// Update in localStorage\nlocalStorage.setItem('user',JSON.stringify(updatedUser));// Update in state\nsetUser(updatedUser);return updatedUser;};const value={user,loading,error,login,loginWithGoogle,register,logout,updateUser,isAuthenticated:!!user};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsx","_jsx","API_BASE_URL","process","env","REACT_APP_API_URL","GOOGLE_CLIENT_ID","REACT_APP_GOOGLE_CLIENT_ID","GOOGLE_REDIRECT_URI","REACT_APP_GOOGLE_REDIRECT_URI","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","code","console","warn","isNetworkError","AuthContext","MOCK_USERS","id","name","email","password","role","AuthProvider","_ref","children","user","setUser","loading","setLoading","setError","isAuthenticated","setIsAuthenticated","checkAuth","get","data","err","_err$response","status","mockUser","JSON","parse","Error","removeItem","login","find","u","toLowerCase","log","userWithoutPassword","mockToken","Date","now","setItem","stringify","post","apiError","_apiError$response","_apiError$response2","_apiError$response3","_apiError$response4","_apiError$response4$d","message","errorMessage","loginWithGoogle","googleAuthUrl","window","location","href","mockGoogleUser","picture","authProvider","_apiError$response5","toString","_apiError$response6","_apiError$response6$d","register","userData","_apiError$response7","_apiError$response8","_apiError$response9","_apiError$response9$d","some","push","includes","_apiError$response10","_apiError$response10$","logout","updateUser","updatedData","updatedUser","value","Provider","useAuth","context"],"sources":["D:/DHWANI/PDEU/SEM6/AWT/Food Delivery project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create a baseURL that can be easily changed for different environments\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Google OAuth Configuration - would typically come from environment variables\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '486416947192-v72oq2gu28e25oqfg5rhnfgfnj85nmlg.apps.googleusercontent.com';\nconst GOOGLE_REDIRECT_URI = process.env.REACT_APP_GOOGLE_REDIRECT_URI || 'http://localhost:3000/auth/google/callback';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 8000, // Reduced timeout for faster error response\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle network errors (server not running)\n    if (error.code === 'ERR_NETWORK' || !error.response) {\n      console.warn('Network error detected, server might be down');\n      error.isNetworkError = true;\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst AuthContext = createContext(null);\n\n// Mock users database for development\nconst MOCK_USERS = [\n  {\n    id: '1',\n    name: 'Aarchi Patel',\n    email: 'patel.aarchi.sanjay@gmail.com',\n    password: 'password',\n    role: 'user'\n  },\n  {\n    id: '2',\n    name: 'Test User',\n    email: 'user@example.com',\n    password: 'password',\n    role: 'user'\n  },\n  {\n    id: '3',\n    name: 'Raksha',\n    email: 'raksha123@gmail.com',\n    password: 'password123',\n    role: 'user'\n  }\n];\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await api.get('/auth/me', {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n          setUser(response.data);\n          setIsAuthenticated(true); // ✅ Mark as authenticated\n        } catch (err) {\n          // If network error or API not available, try mock authentication\n          if (err.isNetworkError || err.response?.status === 404) {\n            console.warn('Auth check failed with server, using mock data');\n            const mockUser = JSON.parse(localStorage.getItem('user'));\n            if (mockUser) {\n              setUser(mockUser);\n              setIsAuthenticated(true); // ✅ Still authenticated (mock)\n            } else {\n              setIsAuthenticated(false); // ❌ No user found\n              throw new Error('No user session found');\n            }\n          } else {\n            setIsAuthenticated(false); // ❌ Token error or other issue\n            throw err;\n          }\n        }\n      } else {\n        setIsAuthenticated(false); // ❌ No token at all\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n      if (!err.isNetworkError) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n      setIsAuthenticated(false); // ❌ Final fallback\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const login = async (email, password) => {\n    try {\n      setError(null);\n      \n      if (!email || !password) {\n        throw new Error('Email and password are required');\n      }\n      \n      // For testing/development - check mock database first\n      const mockUser = MOCK_USERS.find(\n        u => u.email.toLowerCase() === email.toLowerCase()\n      );\n      \n      if (mockUser) {\n        // Found user in mock database, verify password\n        if (mockUser.password === password) {\n          console.log('Mock login successful for:', email);\n          \n          // Create a clean version without password\n          const { password, ...userWithoutPassword } = mockUser;\n          const mockToken = `mock-token-${Date.now()}`;\n          \n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n          setUser(userWithoutPassword);\n          return userWithoutPassword;\n        } else {\n          // Password doesn't match\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        }\n      }\n      \n      // If not found in mock database or if we want to try real API\n      try {\n        const response = await api.post('/auth/login', { email, password });\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        // If network error or API not available, use mock login as fallback\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Login API unavailable, using mock login fallback');\n          \n          // If we already checked mock database above and didn't find match\n          // Just throw the error\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        } else if (apiError.response?.status === 401) {\n          // Handle unauthorized explicitly\n          throw new Error('Invalid email or password. Please check your credentials and try again.');\n        } else if (apiError.response?.status === 429) {\n          // Handle rate limiting\n          throw new Error('Too many login attempts. Please try again later.');\n        } else {\n          // Server responded with another error\n          throw new Error(apiError.response?.data?.message || 'Login failed. Please try again.');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const loginWithGoogle = async () => {\n    try {\n      setError(null);\n      \n      // In a real implementation, we would get the code from the redirect\n      // Here we'll simulate the process for demonstration\n      \n      try {\n        // 1. Redirect users to Google's OAuth page\n        const googleAuthUrl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${GOOGLE_CLIENT_ID}&redirect_uri=${GOOGLE_REDIRECT_URI}&response_type=code&scope=email%20profile&prompt=select_account`;\n        \n        // For the purpose of this example, we'll open in the same window\n        window.location.href = googleAuthUrl;\n        \n        // The rest of this function would normally be executed after redirect back\n        // But for demo purposes we'll simulate a successful authentication\n        \n        // Mock user for demonstration (would come from the API in real implementation)\n        const mockGoogleUser = {\n          id: 'google-123456',\n          name: 'Google User',\n          email: 'googleuser@example.com',\n          picture: 'https://via.placeholder.com/150',\n          role: 'user',\n          authProvider: 'google'\n        };\n        \n        const mockToken = `google-mock-token-${Date.now()}`;\n        localStorage.setItem('token', mockToken);\n        localStorage.setItem('user', JSON.stringify(mockGoogleUser));\n        setUser(mockGoogleUser);\n        \n        return mockGoogleUser;\n      } catch (apiError) {\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Google login API unavailable, using mock login');\n          \n          // Create mock user for Google auth\n          const mockGoogleUser = {\n            id: 'google-' + Date.now().toString(),\n            name: 'Google User',\n            email: 'google_user@example.com',\n            picture: 'https://via.placeholder.com/150',\n            role: 'user',\n            authProvider: 'google'\n          };\n          \n          const mockToken = `google-mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockGoogleUser));\n          setUser(mockGoogleUser);\n          \n          return mockGoogleUser;\n        } else {\n          // Server responded with an error\n          throw new Error(apiError.response?.data?.message || 'Google authentication failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Google login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setError(null);\n      \n      try {\n        const response = await api.post('/auth/register', userData);\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        // If network error or API not available, use mock registration\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Register API unavailable, using mock registration');\n          \n          // Check if email already exists in mock database\n          if (MOCK_USERS.some(u => u.email === userData.email)) {\n            throw new Error('Email address is already registered. Please use a different email or try logging in.');\n          }\n          \n          // Create mock user\n          const mockUser = {\n            id: Date.now().toString(),\n            name: userData.name,\n            email: userData.email,\n            role: 'user'\n          };\n          \n          const mockToken = `mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n          \n          // Add to mock database (would not be needed in real app)\n          MOCK_USERS.push({\n            ...mockUser,\n            password: userData.password\n          });\n          \n          return mockUser;\n        } else if (apiError.response?.status === 409) {\n          // Conflict - Email already exists\n          throw new Error('Email address is already registered. Please use a different email or try logging in.');\n        } else if (apiError.response?.data?.message && apiError.response.data.message.includes('Username already taken')) {\n          // If it's a username error, convert it to an email error to be consistent\n          throw new Error('Email address is already registered. Please use a different email or try logging in.');\n        } else {\n          // Server responded with an error\n          throw new Error(apiError.response?.data?.message || 'Registration failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n\n  const updateUser = (updatedData) => {\n    if (!user) return null;\n    \n    // Create updated user object\n    const updatedUser = {\n      ...user,\n      ...updatedData\n    };\n    \n    // Update in localStorage\n    localStorage.setItem('user', JSON.stringify(updatedUser));\n    \n    // Update in state\n    setUser(updatedUser);\n    \n    return updatedUser;\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    loginWithGoogle,\n    register,\n    logout,\n    updateUser,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}