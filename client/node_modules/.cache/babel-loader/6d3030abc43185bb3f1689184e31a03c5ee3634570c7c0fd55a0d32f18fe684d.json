{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Food Delivery project\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create a baseURL that can be easily changed for different environments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Use mock data if no backend is available\n        try {\n          const response = await api.get('/auth/me');\n          setUser(response.data);\n        } catch (err) {\n          console.warn('Auth check failed with server, using mock data:', err);\n          // Mock user data for development\n          const mockUser = JSON.parse(localStorage.getItem('user'));\n          if (mockUser) {\n            setUser(mockUser);\n          } else {\n            throw new Error('No user found');\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Auth check failed completely:', err);\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      // Try real API first\n      try {\n        const response = await api.post('/auth/login', {\n          email,\n          password\n        });\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        console.warn('Login API failed, using mock:', apiError);\n\n        // Mock login for development\n        // In a real app, you would remove this mock code in production\n        if (email === 'user@example.com' && password === 'password') {\n          const mockUser = {\n            id: '1',\n            name: 'Test User',\n            email: email,\n            role: 'user'\n          };\n          const mockToken = 'mock-jwt-token';\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n          return mockUser;\n        } else {\n          throw new Error('Invalid credentials');\n        }\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      const errorMessage = ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const register = async userData => {\n    try {\n      setError(null);\n      // Try real API first\n      try {\n        const response = await api.post('/auth/register', userData);\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        console.warn('Register API failed, using mock:', apiError);\n\n        // Mock registration for development\n        const mockUser = {\n          id: Date.now().toString(),\n          name: userData.name,\n          email: userData.email,\n          role: 'user'\n        };\n        const mockToken = 'mock-jwt-token';\n        localStorage.setItem('token', mockToken);\n        localStorage.setItem('user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        return mockUser;\n      }\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      const errorMessage = ((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","setError","checkAuth","response","get","data","err","console","warn","mockUser","JSON","parse","Error","removeItem","login","email","password","post","setItem","stringify","apiError","id","name","role","mockToken","_err$response","_err$response$data","errorMessage","message","register","userData","Date","now","toString","_err$response2","_err$response2$data","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/HP/Food Delivery project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create a baseURL that can be easily changed for different environments\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        // Use mock data if no backend is available\n        try {\n          const response = await api.get('/auth/me');\n          setUser(response.data);\n        } catch (err) {\n          console.warn('Auth check failed with server, using mock data:', err);\n          // Mock user data for development\n          const mockUser = JSON.parse(localStorage.getItem('user'));\n          if (mockUser) {\n            setUser(mockUser);\n          } else {\n            throw new Error('No user found');\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Auth check failed completely:', err);\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      // Try real API first\n      try {\n        const response = await api.post('/auth/login', { email, password });\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        console.warn('Login API failed, using mock:', apiError);\n        \n        // Mock login for development\n        // In a real app, you would remove this mock code in production\n        if (email === 'user@example.com' && password === 'password') {\n          const mockUser = {\n            id: '1',\n            name: 'Test User',\n            email: email,\n            role: 'user'\n          };\n          const mockToken = 'mock-jwt-token';\n          \n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n          return mockUser;\n        } else {\n          throw new Error('Invalid credentials');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setError(null);\n      // Try real API first\n      try {\n        const response = await api.post('/auth/register', userData);\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        console.warn('Register API failed, using mock:', apiError);\n        \n        // Mock registration for development\n        const mockUser = {\n          id: Date.now().toString(),\n          name: userData.name,\n          email: userData.email,\n          role: 'user'\n        };\n        const mockToken = 'mock-jwt-token';\n        \n        localStorage.setItem('token', mockToken);\n        localStorage.setItem('user', JSON.stringify(mockUser));\n        setUser(mockUser);\n        return mockUser;\n      }\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}