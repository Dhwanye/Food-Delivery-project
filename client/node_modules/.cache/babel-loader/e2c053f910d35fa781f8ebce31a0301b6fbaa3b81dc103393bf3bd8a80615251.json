{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Food Delivery project\\\\client\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create a baseURL that can be easily changed for different environments\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 8000,\n  // Reduced timeout for faster error response\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(response => response, error => {\n  // Handle network errors (server not running)\n  if (error.code === 'ERR_NETWORK' || !error.response) {\n    console.warn('Network error detected, server might be down');\n    error.isNetworkError = true;\n  }\n  return Promise.reject(error);\n});\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// Mock users database for development\nconst MOCK_USERS = [{\n  id: '1',\n  name: 'Aarchi Patel',\n  email: 'patel.aarchi.sanjay@gmail.com',\n  password: 'password',\n  role: 'user'\n}, {\n  id: '2',\n  name: 'Test User',\n  email: 'user@example.com',\n  password: 'password',\n  role: 'user'\n}];\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    checkAuth();\n  }, []);\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await api.get('/auth/me');\n          setUser(response.data);\n        } catch (err) {\n          var _err$response;\n          // If network error or API not available, try mock authentication\n          if (err.isNetworkError || ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 404) {\n            console.warn('Auth check failed with server, using mock data');\n            const mockUser = JSON.parse(localStorage.getItem('user'));\n            if (mockUser) {\n              setUser(mockUser);\n            } else {\n              throw new Error('No user session found');\n            }\n          } else {\n            // Other errors (invalid token, etc.)\n            throw err;\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n      // Only clear if it's an actual auth error, not a network error\n      if (!err.isNetworkError) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      try {\n        const response = await api.post('/auth/login', {\n          email,\n          password\n        });\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        var _apiError$response;\n        // If network error or API not available, use mock login\n        if (apiError.isNetworkError || ((_apiError$response = apiError.response) === null || _apiError$response === void 0 ? void 0 : _apiError$response.status) === 404) {\n          console.warn('Login API unavailable, using mock login');\n\n          // Try to find user in mock database\n          const mockUser = MOCK_USERS.find(u => u.email === email && u.password === password);\n          if (mockUser) {\n            // Create a clean version without password\n            const {\n              password,\n              ...userWithoutPassword\n            } = mockUser;\n            const mockToken = `mock-token-${Date.now()}`;\n            localStorage.setItem('token', mockToken);\n            localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n            setUser(userWithoutPassword);\n            return userWithoutPassword;\n          } else {\n            throw new Error('Invalid email or password');\n          }\n        } else {\n          var _apiError$response2, _apiError$response2$d;\n          // Server responded with an error\n          throw new Error(((_apiError$response2 = apiError.response) === null || _apiError$response2 === void 0 ? void 0 : (_apiError$response2$d = _apiError$response2.data) === null || _apiError$response2$d === void 0 ? void 0 : _apiError$response2$d.message) || 'Login failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const register = async userData => {\n    try {\n      setError(null);\n      try {\n        const response = await api.post('/auth/register', userData);\n        const {\n          token,\n          user\n        } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        var _apiError$response3;\n        // If network error or API not available, use mock registration\n        if (apiError.isNetworkError || ((_apiError$response3 = apiError.response) === null || _apiError$response3 === void 0 ? void 0 : _apiError$response3.status) === 404) {\n          console.warn('Register API unavailable, using mock registration');\n\n          // Check if email already exists in mock database\n          if (MOCK_USERS.some(u => u.email === userData.email)) {\n            throw new Error('Email already exists');\n          }\n\n          // Create mock user\n          const mockUser = {\n            id: Date.now().toString(),\n            name: userData.name,\n            email: userData.email,\n            role: 'user'\n          };\n          const mockToken = `mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n\n          // Add to mock database (would not be needed in real app)\n          MOCK_USERS.push({\n            ...mockUser,\n            password: userData.password\n          });\n          return mockUser;\n        } else {\n          var _apiError$response4, _apiError$response4$d;\n          // Server responded with an error\n          throw new Error(((_apiError$response4 = apiError.response) === null || _apiError$response4 === void 0 ? void 0 : (_apiError$response4$d = _apiError$response4.data) === null || _apiError$response4$d === void 0 ? void 0 : _apiError$response4$d.message) || 'Registration failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"PA9FxEY9xSNRrsSqaLtbYei52Hs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","code","console","warn","isNetworkError","AuthContext","MOCK_USERS","id","name","email","password","role","AuthProvider","children","_s","user","setUser","loading","setLoading","setError","checkAuth","get","data","err","_err$response","status","mockUser","JSON","parse","Error","removeItem","login","post","setItem","stringify","apiError","_apiError$response","find","u","userWithoutPassword","mockToken","Date","now","_apiError$response2","_apiError$response2$d","message","errorMessage","register","userData","_apiError$response3","some","toString","push","_apiError$response4","_apiError$response4$d","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/HP/Food Delivery project/client/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\n\n// Create a baseURL that can be easily changed for different environments\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\n// Configure axios defaults\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 8000, // Reduced timeout for faster error response\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add response interceptor to handle common errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    // Handle network errors (server not running)\n    if (error.code === 'ERR_NETWORK' || !error.response) {\n      console.warn('Network error detected, server might be down');\n      error.isNetworkError = true;\n    }\n    return Promise.reject(error);\n  }\n);\n\nconst AuthContext = createContext(null);\n\n// Mock users database for development\nconst MOCK_USERS = [\n  {\n    id: '1',\n    name: 'Aarchi Patel',\n    email: 'patel.aarchi.sanjay@gmail.com',\n    password: 'password',\n    role: 'user'\n  },\n  {\n    id: '2',\n    name: 'Test User',\n    email: 'user@example.com',\n    password: 'password',\n    role: 'user'\n  }\n];\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await api.get('/auth/me');\n          setUser(response.data);\n        } catch (err) {\n          // If network error or API not available, try mock authentication\n          if (err.isNetworkError || err.response?.status === 404) {\n            console.warn('Auth check failed with server, using mock data');\n            const mockUser = JSON.parse(localStorage.getItem('user'));\n            if (mockUser) {\n              setUser(mockUser);\n            } else {\n              throw new Error('No user session found');\n            }\n          } else {\n            // Other errors (invalid token, etc.)\n            throw err;\n          }\n        }\n      }\n    } catch (err) {\n      console.error('Auth check failed:', err);\n      // Only clear if it's an actual auth error, not a network error\n      if (!err.isNetworkError) {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      setError(null);\n      \n      try {\n        const response = await api.post('/auth/login', { email, password });\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        // If network error or API not available, use mock login\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Login API unavailable, using mock login');\n          \n          // Try to find user in mock database\n          const mockUser = MOCK_USERS.find(\n            u => u.email === email && u.password === password\n          );\n          \n          if (mockUser) {\n            // Create a clean version without password\n            const { password, ...userWithoutPassword } = mockUser;\n            const mockToken = `mock-token-${Date.now()}`;\n            \n            localStorage.setItem('token', mockToken);\n            localStorage.setItem('user', JSON.stringify(userWithoutPassword));\n            setUser(userWithoutPassword);\n            return userWithoutPassword;\n          } else {\n            throw new Error('Invalid email or password');\n          }\n        } else {\n          // Server responded with an error\n          throw new Error(apiError.response?.data?.message || 'Login failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Login failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      setError(null);\n      \n      try {\n        const response = await api.post('/auth/register', userData);\n        const { token, user } = response.data;\n        localStorage.setItem('token', token);\n        localStorage.setItem('user', JSON.stringify(user));\n        setUser(user);\n        return user;\n      } catch (apiError) {\n        // If network error or API not available, use mock registration\n        if (apiError.isNetworkError || apiError.response?.status === 404) {\n          console.warn('Register API unavailable, using mock registration');\n          \n          // Check if email already exists in mock database\n          if (MOCK_USERS.some(u => u.email === userData.email)) {\n            throw new Error('Email already exists');\n          }\n          \n          // Create mock user\n          const mockUser = {\n            id: Date.now().toString(),\n            name: userData.name,\n            email: userData.email,\n            role: 'user'\n          };\n          \n          const mockToken = `mock-token-${Date.now()}`;\n          localStorage.setItem('token', mockToken);\n          localStorage.setItem('user', JSON.stringify(mockUser));\n          setUser(mockUser);\n          \n          // Add to mock database (would not be needed in real app)\n          MOCK_USERS.push({\n            ...mockUser,\n            password: userData.password\n          });\n          \n          return mockUser;\n        } else {\n          // Server responded with an error\n          throw new Error(apiError.response?.data?.message || 'Registration failed');\n        }\n      }\n    } catch (err) {\n      const errorMessage = err.message || 'Registration failed';\n      setError(errorMessage);\n      throw new Error(errorMessage);\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setUser(null);\n    setError(null);\n  };\n\n  const value = {\n    user,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    isAuthenticated: !!user\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}